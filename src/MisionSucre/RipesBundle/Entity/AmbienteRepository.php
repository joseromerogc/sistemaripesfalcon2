<?php

namespace MisionSucre\RipesBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AmbienteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AmbienteRepository extends EntityRepository
{
    public function PorAldeaModalidadConPeriodo($aldea,$modalidad="%%")
    {/*
     * Ambientes de una aldea con Periodo Academico 
     */
          return $this->getEntityManager()
            ->createQuery(
                "SELECT pa FROM MisionSucreRipesBundle:PeriodoAcademico p, MisionSucreRipesBundle:PeriodoAcademicoAmbiente pa JOIN pa.ambiente a JOIN a.pnf pnf
                    WHERE a.aldea=:aldea AND pnf.modalidad LIKE :modalidad AND LOWER(p.actual)=:actual AND p.id = pa.periodoacademico
                    AND (a.condicion ='Nuevo' OR a.condicion ='Activo')
                "
            )
            ->setParameters(array('modalidad'=>$modalidad,'aldea'=>$aldea,'actual'=>'SI'))->getResult();
    }
    public function PorAldeaModalidadSinPeriodo($aldea,$modalidad="%%")
    {/*
     * Ambientes de una aldea sin Periodo Academico
     */
          return $this->getEntityManager()
            ->createQuery(
                "SELECT a FROM MisionSucreRipesBundle:Ambiente a JOIN a.pnf pnf
                    WHERE
                    NOT EXISTS
                   ( SELECT pa FROM MisionSucreRipesBundle:PeriodoAcademicoAmbiente pa JOIN pa.periodoacademico p WHERE pa.ambiente=a.id AND LOWER(p.actual)='si')
                   AND a.aldea=:aldea AND pnf.modalidad LIKE :modalidad AND (a.condicion ='Nuevo' OR a.condicion ='Activo')
                "
            )->setParameters(array('aldea'=>$aldea,'modalidad'=>$modalidad))
            ->getResult();
    }
    
    public function PorAldeaModalidadConPeriodoCoordinador($aldea,$idcoordinador, $modalidad="%%")
    {/*
     * Ambientes de una aldea con Periodo Academico  de un coordinador especifico
     */
          return $this->getEntityManager()
            ->createQuery(
                "SELECT pa FROM MisionSucreRipesBundle:PeriodoAcademico p, MisionSucreRipesBundle:PeriodoAcademicoAmbiente pa JOIN pa.ambiente a JOIN a.pnf pnf,
                    MisionSucreRipesBundle:CoordinadorTurno t JOIN t.coordinador c
                    WHERE a.aldea=:aldea AND pnf.modalidad LIKE :modalidad AND LOWER(p.actual)=:actual AND p.id = pa.periodoacademico
                    AND (a.condicion ='Nuevo' OR a.condicion ='Activo')
                    AND c.id = :idcoordinador AND c.aldea = a.aldea AND t.turno=a.turno
                "
            )
            ->setParameters(array('modalidad'=>$modalidad,'aldea'=>$aldea,'idcoordinador'=> $idcoordinador,'actual'=>'SI'))->getResult();
    }
    public function PorAldeaModalidadSinPeriodoCoordinador($aldea,$idcoordinador,$modalidad="%%")
    {/*
     * Ambientes de una aldea sin Periodo Academico
     */
          return $this->getEntityManager()
            ->createQuery(
                "SELECT a FROM MisionSucreRipesBundle:Ambiente a JOIN a.pnf pnf,
                    MisionSucreRipesBundle:CoordinadorTurno t JOIN t.coordinador c
                    WHERE
                    NOT EXISTS
                   ( SELECT pa FROM MisionSucreRipesBundle:PeriodoAcademicoAmbiente pa JOIN pa.periodoacademico p WHERE pa.ambiente=a.id AND LOWER(p.actual)='si')
                   AND a.aldea=:aldea AND pnf.modalidad LIKE :modalidad AND (a.condicion ='Nuevo' OR a.condicion ='Activo')
                   AND c.id = :idcoordinador AND c.aldea = a.aldea AND t.turno=a.turno
                "
            )->setParameters(array('aldea'=>$aldea,'modalidad'=>$modalidad,'idcoordinador'=> $idcoordinador))
            ->getResult();
    }
    
    public function AmbientesAldeaTurnoModalidad($aldea,$turno,$modalidad)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT pa FROM MisionSucreRipesBundle:PeriodoAcademico p, MisionSucreRipesBundle:PeriodoAcademicoAmbiente pa JOIN pa.ambiente a JOIN a.pnf pnf
                    WHERE a.aldea=:aldea AND pnf.modalidad=:modalidad AND p.actual=:actual AND p.id = pa.periodoacademico AND
                     a.turno=:turno
                     AND (a.condicion ='Nuevo' OR a.condicion ='Activo')
                "
            )
            ->setParameters(array('turno'=>$turno,'aldea'=>$aldea,'modalidad'=>$modalidad,'actual'=>'SI'))->getResult();
    }
    
    public function AmbientesAldeaTurnoModalidadSinPeriodoActual($aldea,$turno,$modalidad="%%")
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT a FROM MisionSucreRipesBundle:Ambiente a JOIN a.pnf pnf
                    WHERE
                    a.aldea=:aldea AND pnf.modalidad LIKE :modalidad AND a.turno =:turno AND 
                    NOT EXISTS
                   ( SELECT pa FROM MisionSucreRipesBundle:PeriodoAcademicoAmbiente pa JOIN pa.periodoacademico p WHERE pa.ambiente=a.id AND LOWER(p.actual)='si'
                   )
                   AND (a.condicion ='Nuevo' OR a.condicion ='Activo')
                   
                "
            )->setParameters(array('turno'=>$turno,'modalidad'=>$modalidad,'aldea'=>$aldea))
            ->getResult();
    }
    
    public function findAllByAldea($aldea)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT pacd,a,p FROM MisionSucreRipesBundle:PeriodoAcademicoAmbiente pacd JOIN pacd.ambiente a JOIN a.pnf p
                    WHERE a.aldea=:aldea
                    AND (a.condicion ='Nuevo' OR a.condicion ='Activo')
                "
            )
            ->setParameters(array('aldea'=>$aldea))->getResult();
    }
    //Ambientes con periodos academico actual 
    public function findAllOrderedByAmbiente()
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT pa as ambiente, 
                    (select count(tr.id)  FROM MisionSucreRipesBundle:Triunfador tr WHERE tr.ambiente=a.id) AS cantidadtriunfadores 
                    FROM MisionSucreRipesBundle:PeriodoAcademico p, MisionSucreRipesBundle:PeriodoAcademicoAmbiente pa JOIN pa.ambiente a
                    WHERE p.actual=:actual AND pa.periodoacademico=p.id
                    AND (a.condicion ='Nuevo' OR a.condicion ='Activo')
                "
            )
            ->setParameters(array('actual'=>'SI'))->getResult();
    }
    
    //Ambientes con periodos academico actual de una aldea
    public function findAllOrderedByAmbienteAndAldea($aldea)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT pa FROM MisionSucreRipesBundle:PeriodoAcademico p, MisionSucreRipesBundle:PeriodoAcademicoAmbiente pa JOIN pa.ambiente a
                    WHERE p.actual=:actual AND a.aldea=:aldea AND pa.periodoacademico=p.id
                    AND (a.condicion ='Nuevo' OR a.condicion ='Activo')
                "
            )
            ->setParameters(array('actual'=>'SI','aldea'=>$aldea))->getResult();
    }
    public function findAllOrderedByAmbienteAndAldeaAndTurno($aldea,$turno='%%')
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT pa FROM MisionSucreRipesBundle:PeriodoAcademico p, MisionSucreRipesBundle:PeriodoAcademicoAmbiente pa JOIN pa.ambiente a
                    WHERE p.actual=:actual AND a.aldea=:aldea AND pa.periodoacademico=p.id  AND a.turno LIKE :turno
                    AND (a.condicion ='Nuevo' OR a.condicion ='Activo')
                "
            )
            ->setParameters(array('actual'=>'SI','aldea'=>$aldea,'turno'=>"'$turno[0]%'"))->getResult();
    }
    
    //Ambientes con periodos academico actual de un eje
    public function findAllOrderedByAmbienteAndEje($eje)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT pa as ambiente, 
               (select count(tr.id)  FROM MisionSucreRipesBundle:Triunfador tr WHERE tr.ambiente=am.id) AS cantidadtriunfadores  
               FROM MisionSucreRipesBundle:PeriodoAcademico p, MisionSucreRipesBundle:PeriodoAcademicoAmbiente pa JOIN 
                    pa.ambiente am JOIN am.aldea al JOIN al.parroquia prq
                    WHERE p.actual=:actual AND prq.eje = :eje AND pa.periodoacademico=p.id
                    AND (am.condicion ='Nuevo' OR am.condicion ='Activo')
                "
            )
            ->setParameters(array('actual'=>'SI','eje'=>$eje))->getResult();
    }
    
     //Ambientes sin periodo
    public function findAllOrderedByPeriodoAcademico()
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT a as ambiente, (select count(tr.id)  FROM MisionSucreRipesBundle:Triunfador tr WHERE tr.ambiente=a.id) AS cantidadtriunfadores 
                    FROM MisionSucreRipesBundle:Ambiente a WHERE
                    NOT EXISTS
                   ( SELECT pa FROM MisionSucreRipesBundle:PeriodoAcademicoAmbiente pa join pa.periodoacademico p WHERE pa.ambiente=a.id AND p.actual=:actual) 
                   AND (a.condicion ='Nuevo' OR a.condicion ='Activo')
                "
            )->setParameters(array('actual'=>'SI'))
            ->getResult();
    }
    
    public function findAllOrderedByPeriodoAcademicoAndAldeaAndTurno($aldea,$turno)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT a FROM MisionSucreRipesBundle:Ambiente a JOIN a.pnf pnf
                    WHERE
                    NOT EXISTS
                   ( SELECT pa FROM MisionSucreRipesBundle:PeriodoAcademicoAmbiente pa JOIN pa.periodoacademico p WHERE pa.ambiente=a.id AND LOWER(p.actual)='si')
                   AND a.aldea=:aldea AND pnf.modalidad LIKE :modalidad AND a.turno LIKE :turno
                   AND (a.condicion ='Nuevo' OR a.condicion ='Activo')
                "
            )->setParameters(array('aldea'=>$aldea,'modalidad'=>$modalidad,'turno'=>"'$turno[0]%'"))
            ->getResult();
    }
    //Ambientes sin periodo de un Eje
    public function findAllOrderedByPeriodoAcademicoAndEje($eje)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT am as ambiente, (select count(tr.id)  FROM MisionSucreRipesBundle:Triunfador tr WHERE tr.ambiente=am.id) AS cantidadtriunfadores 
                    FROM MisionSucreRipesBundle:Ambiente am JOIN am.aldea al JOIN al.parroquia prq
                    WHERE
                    NOT EXISTS
                   ( SELECT pa FROM MisionSucreRipesBundle:PeriodoAcademicoAmbiente pa join pa.periodoacademico  p WHERE pa.ambiente=am.id AND p.actual=:actual) 
                   AND prq.eje = :eje
                   AND (am.condicion ='Nuevo' OR am.condicion ='Activo')
                "
            )->setParameters(array('actual'=>'SI','eje'=>$eje))
            ->getResult();
    }
    
    
    public function findAmbienteByAnexoAldeaAndModalidad($anexo,$modalidad)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT a,p FROM MisionSucreRipesBundle:Ambiente a JOIN a.pnf p
                    WHERE a.anexo=:anexo AND p.modalidad=:modalidad 
                    AND (a.condicion ='Nuevo' OR a.condicion ='Activo')
                "
            )
            ->setParameters(array('modalidad'=>$modalidad,'anexo'=>$anexo))->getResult();
    }
    
    public function findAllOrderedByEje($eje)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT DISTINCT am FROM MisionSucreRipesBundle:Ambiente am JOIN am.aldea a JOIN a.parroquia p
                    WHERE p.eje = :eje
                    AND (am.condicion ='Nuevo' OR am.condicion ='Activo')
                    "
            )
            ->setParameter('eje', $eje)      
            ->getResult();
    }
    
    public function cantidadAmbientes($aldea)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT p.modalidad, COUNT (a) as cantidadambiente FROM MisionSucreRipesBundle:Ambiente a JOIN a.pnf p
                            WHERE a.aldea = :aldea AND a.condicion !=:egresado
                            AND a.condicion !=:culminado
                             AND (a.condicion ='Nuevo' OR a.condicion ='Activo' )         
                            GROUP BY p.modalidad
                 
                    "
            )
            ->setParameters(array('aldea'=> $aldea,'egresado'=>'Egresado','culminado'=>'Culminado'))
            ->getResult();
    }
    public function cantidadAmbientesTurnos($idcoordinador)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT p.modalidad, COUNT (a) as cantidadambiente FROM MisionSucreRipesBundle:Ambiente a JOIN a.pnf p,
                    MisionSucreRipesBundle:CoordinadorTurno t JOIN t.coordinador c
                            WHERE c.id = :idcoordinador AND a.condicion !=:egresado
                            AND a.condicion !=:culminado AND c.aldea = a.aldea AND t.turno=a.turno
                             AND (a.condicion ='Nuevo' OR a.condicion ='Activo'  )        
                            GROUP BY p.modalidad           
                    "
            )
            ->setParameters(array('idcoordinador'=> $idcoordinador,'egresado'=>'Egresado','culminado'=>'Culminado'))
            ->getResult();
    }
    
    public function cantidadAmbientesCoordinador($idcoordinador)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT COUNT (a) as cantidadambiente FROM MisionSucreRipesBundle:Ambiente a JOIN a.pnf p,
                    MisionSucreRipesBundle:CoordinadorTurno t JOIN t.coordinador c
                            WHERE c.id = :idcoordinador AND a.condicion !=:egresado
                            AND a.condicion !=:culminado AND c.aldea = a.aldea AND t.turno=a.turno
                             AND (a.condicion ='Nuevo' OR a.condicion ='Activo'  )       
                    "
            )
            ->setParameters(array('idcoordinador'=> $idcoordinador,'egresado'=>'Egresado','culminado'=>'Culminado'))
            ->getSingleResult();
    }
    
    public function cantidadAmbientesnovinculados($aldea)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT COUNT (a) as cantidadambiente FROM MisionSucreRipesBundle:Ambiente a 
                            WHERE a.aldea = :aldea AND upper(a.vinculadosistema) LIKE :parametro  AND (a.condicion ='Nuevo' OR a.condicion ='Activo' )         
                            
                    "
            )
            ->setParameters(array('aldea'=> $aldea,'parametro'=>"NO"))      
            ->getSingleResult();
    }
    public function cantidadAmbientesnovinculadosTurnos($idcoordinador)
    {
          return $this->getEntityManager()
            ->createQuery(
                "SELECT COUNT (a) as cantidadambiente FROM MisionSucreRipesBundle:Ambiente a,
                    MisionSucreRipesBundle:CoordinadorTurno t JOIN t.coordinador c
                            WHERE upper(a.vinculadosistema) LIKE :parametro
                            AND c.id = :idcoordinador AND c.aldea = a.aldea AND t.turno=a.turno
                            AND (a.condicion ='Nuevo' OR a.condicion ='Activo')          
                    "
            )
            ->setParameters(array('idcoordinador'=> $idcoordinador,'parametro'=>"NO"))      
            ->getSingleResult();
    }

}
